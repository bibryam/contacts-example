{
  "apiVersion" : "v1",
  "kind" : "Template",
  "labels" : { },
  "metadata" : {
    "annotations" : {
      "description" : "# CDI Camel Jetty QuickStart\n\nThis example shows how to work with Camel in the Java Container using CDI to configure components,\nendpoints and beans.\n\nThis quickstart is the server side which embeds a Jetty HTTP server in a Camel route that\nexposes a HTTP service.\n\nThe `quickstart-cdi-camel-http` is the client to this quickstart that can be started which will call this\nJetty HTTP server every 5 second.\n\n\n### Building\n\nThe example can be built with\n\n    mvn clean install\n\n\n### Running the example locally\n\nThe example can be run locally using the following Maven goal:\n\n    mvn clean install exec:java\n\nAnd you can access the HTTP service using a web browser on url:\n\n    http://localhost:8080/camel/hello\n\n\n### Running the example in fabric8\n\nIt is assumed that OpenShift platform is already running. If not you can find details how to [Install OpenShift at your site](https://docs.openshift.com/enterprise/3.1/install_config/install/index.html).\n\nThe example can be built and deployed using a single goal:\n\n    mvn -Pf8-deploy\n\nWhen the example runs in OpenShift, you can use the OpenShift client tool to inspect the status\n\nTo list all the running pods:\n\n    oc get pods\n\nThen find the name of the pod that runs this quickstart, and output the logs from the running pods with:\n\n    oc logs <name of pod>\n\nThe example exposes a service over HTTP which you can find using\n\n    oc get routes\n\nThis lists all the routes to the services, where you can find the actual HTTP url, which you can use from a web browser.\n\n\nYou can also use the OpenShift [web console](https://docs.openshift.com/enterprise/3.1/getting_started/developers/developers_console.html#tutorial-video) to manage the\nrunning pods, and view logs and much more.\n\n\n## Calling the HTTP service from a shell script\n\nYou can also call the remote HTTP service from a shell script. We have provided a script named `src/test/resources/hitme-f8.sh` (no script for windows)\nin the source code for the quickstart, not in the docker image, which will call the service once per second.\n\nYou may need to add execution permission to the script before you can execute it\n\n    chmod +x src/test/resources/hitme-f8.sh\n\nAnd then run the script\n\n    src/test/resources/hitme-f8.sh\n\nWhile the script runs, you can try to scale up or down the number of pods on the Jetty HTTP service using either the OpenShift web console,\nor from the command line using the openshift client\n\n    oc scale --replicas=3 replicationcontrollers quickstart-cdi-camel-jetty\n\n\n### Running the example using OpenShift S2I template\n\nThe example can also be built and run using the included S2I template quickstart-template.json.\n\nThe application can be run directly by first editing the template file and populating S2I build parameters, including the required parameter GIT_REPO and then executing the command:\n\n    oc new-app -f quickstart-template.json\n\nAlternatively the template file can be used to create an OpenShift application template by executing the command:\n\n    oc create -f quickstart-template.json\n\n\n### More details\n\nYou can find more details about running this [quickstart](http://fabric8.io/guide/quickstarts/running.html) on the website. This also includes instructions how to change the Docker image user and registry.\n\n# contacts-example\n",
      "fabric8.demo/summary" : "Camel route using CDI in a standalone Java Container using Jetty as HTTP server",
      "fabric8.demo/iconUrl" : "img/icons/camel.svg"
    },
    "labels" : { },
    "name" : "demo"
  },
  "objects" : [ {
    "apiVersion" : "v1",
    "kind" : "ImageStream",
    "metadata" : {
      "annotations" : { },
      "labels" : {
        "app" : "contacts-example",
        "artifact" : "demo",
        "version" : "1.0-SNAPSHOT",
        "group" : "com.inmarsat.demo"
      },
      "name" : "contacts-example"
    },
    "spec" : {
      "dockerImageRepository" : "",
      "tags" : [ ]
    }
  }, {
    "apiVersion" : "v1",
    "kind" : "BuildConfig",
    "metadata" : {
      "annotations" : { },
      "labels" : {
        "app" : "contacts-example",
        "artifact" : "demo",
        "version" : "1.0-SNAPSHOT",
        "group" : "com.inmarsat.demo"
      },
      "name" : "contacts-example"
    },
    "spec" : {
      "output" : {
        "to" : {
          "kind" : "ImageStreamTag",
          "name" : "contacts-example:latest"
        }
      },
      "source" : {
        "git" : {
          "ref" : "develop",
          "uri" : "https://github.com/Inmarsat-itcloudservices/contacts-example/"
        },
        "images" : [ ],
        "secrets" : [ ],
        "type" : "Git"
      },
      "strategy" : {
        "sourceStrategy" : {
          "env" : [ ],
          "from" : {
            "kind" : "ImageStreamTag",
            "name" : "fis-java-openshift:latest",
            "namespace" : "openshift"
          },
          "incremental" : true
        },
        "type" : "Source"
      },
      "triggers" : [ {
        "imageChange" : {
          "from" : {
            "kind" : "ImageStreamTag",
            "name" : "fis-java-openshift:latest",
            "namespace" : "openshift"
          }
        },
        "type" : "ImageChange"
      } ]
    }
  }, {
    "apiVersion" : "v1",
    "kind" : "DeploymentConfig",
    "metadata" : {
      "annotations" : { },
      "labels" : {
        "app" : "contacts-example",
        "artifact" : "demo",
        "version" : "1.0-SNAPSHOT",
        "group" : "com.inmarsat.demo"
      },
      "name" : "contacts-example"
    },
    "spec" : {
      "replicas" : 0,
      "selector" : {
        "app" : "contacts-example",
        "deploymentconfig" : "contacts-example"
      },
      "strategy" : {
        "annotations" : { },
        "labels" : { },
        "rollingParams" : {
          "maxSurge" : "30%",
          "maxUnavailable" : "20%",
          "timeoutSeconds" : 240
        },
        "type" : "Rolling"
      },
      "template" : {
        "spec" : {
          "containers" : [ {
            "args" : [ ],
            "command" : [ ],
            "env" : [ ],
            "image" : "contacts-example:latest",
            "imagePullPolicy" : "Always",
            "livenessProbe" : {
              "exec" : {
                "command" : [ "/bin/bash", "-c", "(curl -f 127.0.0.1:8080) >/dev/null 2>&1; test $? != 7" ]
              },
              "initialDelaySeconds" : 30,
              "timeoutSeconds" : 60
            },
            "name" : "contacts-example",
            "ports" : [ {
              "containerPort" : 8080,
              "name" : "cxf",
              "protocol" : "TCP"
            }, {
              "containerPort" : 8778,
              "name" : "jolokia",
              "protocol" : "TCP"
            } ],
            "readinessProbe" : {
              "exec" : {
                "command" : [ "/bin/bash", "-c", "(curl -f 127.0.0.1:8080) >/dev/null 2>&1; test $? != 7" ]
              },
              "initialDelaySeconds" : 30,
              "timeoutSeconds" : 1
            },
            "resources" : {
              "limits" : {
                "cpu" : "400m",
                "memory" : "1024Mi"
              },
              "requests" : {
                "cpu" : "100m",
                "memory" : "512Mi"
              }
            },
            "volumeMounts" : [ ]
          } ],
          "imagePullSecrets" : [ ],
          "nodeSelector" : { },
          "restartPolicy" : "Always",
          "volumes" : [ ]
        }
      },
      "triggers" : [ {
        "type" : "ConfigChange"
      }, {
        "imageChangeParams" : {
          "automatic" : true,
          "containerNames" : [ "contacts-example" ],
          "from" : {
            "kind" : "ImageStreamTag",
            "name" : "contacts-example:latest"
          }
        },
        "type" : "ImageChange"
      } ]
    }
  } ],
  "parameters" : [ ]
}